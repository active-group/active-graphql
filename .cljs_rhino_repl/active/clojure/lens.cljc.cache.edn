{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name active.clojure.lens, :imports nil, :requires nil, :uses nil, :defs {overhaul {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 64, :column 7, :end-line 64, :end-column 15, :arglists (quote ([data lens f] [data lens f & args])), :doc "Updates data using a lens.  The new value will be determined by\n  applying `f` to the old value and any other supplied arguments.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([data lens f]), :arglists ([data lens f] [data lens f & args]), :arglists-meta (nil nil)}}, :name active.clojure.lens/overhaul, :variadic true, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 3, :method-params ([data lens f]), :arglists ([data lens f] [data lens f & args]), :arglists-meta (nil nil)}, :method-params ([data lens f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 3, :fn-var true, :arglists ([data lens f] [data lens f & args]), :doc "Updates data using a lens.  The new value will be determined by\n  applying `f` to the old value and any other supplied arguments."}, at-index-shove {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 262, :column 8, :end-line 262, :end-column 22, :private true, :arglists (quote ([coll v n]))}, :private true, :name active.clojure.lens/at-index-shove, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 22, :method-params ([coll v n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 262, :end-line 262, :max-fixed-arity 3, :fn-var true, :arglists (quote ([coll v n]))}, xmap-shove {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 61, :column 8, :end-line 61, :end-column 18, :private true, :arglists (quote ([data v f g & args])), :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(data v f g args)], :arglists ([data v f g & args]), :arglists-meta (nil)}}, :private true, :name active.clojure.lens/xmap-shove, :variadic true, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(data v f g args)], :arglists ([data v f g & args]), :arglists-meta (nil)}, :method-params [(data v f g args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 4, :fn-var true, :arglists ([data v f g & args])}, comb-shove {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 86, :column 8, :end-line 86, :end-column 18, :private true, :arglists (quote ([data v l1 l2]))}, :private true, :name active.clojure.lens/comb-shove, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 18, :method-params ([data v l1 l2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 4, :fn-var true, :arglists (quote ([data v l1 l2]))}, as-set {:name active.clojure.lens/as-set, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :line 160, :column 1, :end-line 161, :end-column 9, :doc "A lens that views a sequence as a set.", :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 161, :column 3, :end-line 161, :end-column 9, :doc "A lens that views a sequence as a set."}, :tag any}, contains-shove {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 168, :column 8, :end-line 168, :end-column 22, :private true, :arglists (quote ([data mem? v]))}, :private true, :name active.clojure.lens/contains-shove, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 22, :method-params ([data mem? v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 3, :fn-var true, :arglists (quote ([data mem? v]))}, comb-yank {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 84, :column 8, :end-line 84, :end-column 17, :private true, :arglists (quote ([data l1 l2]))}, :private true, :name active.clojure.lens/comb-yank, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 17, :method-params ([data l1 l2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 3, :fn-var true, :arglists (quote ([data l1 l2]))}, ExplicitLens {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection active.clojure.lens/Lens cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name active.clojure.lens/ExplicitLens, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 24, :type true, :column 12, :internal-ctor true, :line 30, :record true, :end-line 30, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/IFn cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ** {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 225, :column 7, :end-line 225, :end-column 9, :arglists (quote ([& lenses])), :doc "Return the product of several lenses, which means that each lens is\n  held over an element of a collection in the order they appear in the\n  argument list.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(lenses)], :arglists ([& lenses]), :arglists-meta (nil)}}, :name active.clojure.lens/**, :variadic true, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(lenses)], :arglists ([& lenses]), :arglists-meta (nil)}, :method-params [(lenses)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 225, :end-line 225, :max-fixed-arity 0, :fn-var true, :arglists ([& lenses]), :doc "Return the product of several lenses, which means that each lens is\n  held over an element of a collection in the order they appear in the\n  argument list."}, at-index {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 268, :column 7, :end-line 268, :end-column 15, :arglists (quote ([n])), :doc "Returns a lens that focuses on the value at position n in a sequence.\n  The sequence must have >= n elements."}, :name active.clojure.lens/at-index, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 15, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 268, :end-line 268, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Returns a lens that focuses on the value at position n in a sequence.\n  The sequence must have >= n elements."}, plus-shove {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 247, :column 8, :end-line 247, :end-column 18, :private true, :arglists (quote ([data v lenses]))}, :private true, :name active.clojure.lens/plus-shove, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 18, :method-params ([data v lenses]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 247, :end-line 247, :max-fixed-arity 3, :fn-var true, :arglists (quote ([data v lenses]))}, contains {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 173, :column 7, :end-line 173, :end-column 15, :arglists (quote ([v])), :doc "Returns a lens showing the membership of the given value in a set."}, :name active.clojure.lens/contains, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 15, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a lens showing the membership of the given value in a set."}, member-shove {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 184, :column 8, :end-line 184, :end-column 20, :private true, :arglists (quote ([data v key not-found]))}, :private true, :name active.clojure.lens/member-shove, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 20, :method-params ([data v key not-found]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 4, :fn-var true, :arglists (quote ([data v key not-found]))}, default-yank {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 105, :column 8, :end-line 105, :end-column 20, :private true, :arglists (quote ([data dflt]))}, :private true, :name active.clojure.lens/default-yank, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 20, :method-params ([data dflt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data dflt]))}, is {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 209, :column 7, :end-line 209, :end-column 9, :arglists (quote ([v])), :doc "Returns a lens showing if a data structure equals the non-nil value v."}, :name active.clojure.lens/is, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 9, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 209, :end-line 209, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns a lens showing if a data structure equals the non-nil value v."}, is-shove {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 202, :column 8, :end-line 202, :end-column 16, :private true, :arglists (quote ([data is? cmp]))}, :private true, :name active.clojure.lens/is-shove, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 16, :method-params ([data is? cmp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 202, :end-line 202, :max-fixed-arity 3, :fn-var true, :arglists (quote ([data is? cmp]))}, xmap {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 72, :column 7, :end-line 72, :end-column 11, :arglists (quote ([f g & args])), :doc "Returns a \"view lens\", that transforms a whole data structure\n   to something else (f) and back (g).", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(f g args)], :arglists ([f g & args]), :arglists-meta (nil)}}, :name active.clojure.lens/xmap, :variadic true, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(f g args)], :arglists ([f g & args]), :arglists-meta (nil)}, :method-params [(f g args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists ([f g & args]), :doc "Returns a \"view lens\", that transforms a whole data structure\n   to something else (f) and back (g)."}, default {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 110, :column 7, :end-line 110, :end-column 14, :arglists (quote ([dflt])), :doc "Returns a lens that shows nil as the given default value, but does not change any other value."}, :name active.clojure.lens/default, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 14, :method-params ([dflt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dflt])), :doc "Returns a lens that shows nil as the given default value, but does not change any other value."}, ->ExplicitLens {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 30, :column 12, :end-line 30, :end-column 24, :internal-ctor true, :factory :positional, :arglists (quote ([yanker shover args]))}, :name active.clojure.lens/->ExplicitLens, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 24, :method-params ([yanker shover args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 30, :end-line 30, :max-fixed-arity 3, :fn-var true, :arglists (quote ([yanker shover args]))}, pos {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 149, :column 7, :end-line 149, :end-column 10, :arglists (quote ([n])), :doc "A lens over the nth element in a collection. Note that when shoving a\n  new value nils may be added before the given position, if the the collection is smaller."}, :name active.clojure.lens/pos, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 10, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "A lens over the nth element in a collection. Note that when shoving a\n  new value nils may be added before the given position, if the the collection is smaller."}, lens {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 50, :column 7, :end-line 50, :end-column 11, :arglists (quote ([yank shove & args])), :doc "Returns a new lens defined by the given yanker function, which\n  takes a data structure and must return the focused value, and the\n  given shover function which takes a data structure and the new value\n  in the focus. Any additional arguments are passed unchanged to the yank\n  and shove functions.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(yank shove args)], :arglists ([yank shove & args]), :arglists-meta (nil)}}, :name active.clojure.lens/lens, :variadic true, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(yank shove args)], :arglists ([yank shove & args]), :arglists-meta (nil)}, :method-params [(yank shove args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists ([yank shove & args]), :doc "Returns a new lens defined by the given yanker function, which\n  takes a data structure and must return the focused value, and the\n  given shover function which takes a data structure and the new value\n  in the focus. Any additional arguments are passed unchanged to the yank\n  and shove functions."}, >> {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 93, :column 7, :end-line 93, :end-column 9, :arglists (quote ([l1 & lmore])), :doc "Returns a concatenation of two or more lenses, so that the combination shows the\n   value of the last one, in a data structure that the first one is put\n   over.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(l1 lmore)], :arglists ([l1 & lmore]), :arglists-meta (nil)}}, :name active.clojure.lens/>>, :variadic true, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(l1 lmore)], :arglists ([l1 & lmore]), :arglists-meta (nil)}, :method-params [(l1 lmore)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists ([l1 & lmore]), :doc "Returns a concatenation of two or more lenses, so that the combination shows the\n   value of the last one, in a data structure that the first one is put\n   over."}, yank {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 12, :column 7, :end-line 12, :end-column 11, :arglists (quote ([data lens])), :doc "Yank a value from the given data value, as defined by the given\n   lens."}, :name active.clojure.lens/yank, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 11, :method-params ([data lens]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data lens])), :doc "Yank a value from the given data value, as defined by the given\n   lens."}, -shove {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 8, :column 4, :end-line 8, :end-column 10, :protocol active.clojure.lens/Lens, :doc nil, :arglists (quote ([lens data v]))}, :protocol active.clojure.lens/Lens, :name active.clojure.lens/-shove, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 10, :method-params ([lens data v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 8, :max-fixed-arity 3, :fn-var true, :arglists (quote ([lens data v])), :doc nil}, shove {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 18, :column 7, :end-line 18, :end-column 12, :arglists (quote ([data lens v])), :doc "Shove a new value v into the given data value, as defined by the\n   given lens, and return the updated data structure."}, :name active.clojure.lens/shove, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 12, :method-params ([data lens v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 3, :fn-var true, :arglists (quote ([data lens v])), :doc "Shove a new value v into the given data value, as defined by the\n   given lens, and return the updated data structure."}, map->ExplicitLens {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 30, :column 12, :end-line 30, :end-column 24, :internal-ctor true, :factory :map, :arglists (quote ([G__34555]))}, :name active.clojure.lens/map->ExplicitLens, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 24, :method-params ([G__34555]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__34555]))}, member {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 189, :column 7, :end-line 189, :end-column 13, :arglists (quote ([key & [not-found]])), :doc "Returns a lens showing the value mapped to the given key in a map,\n  not-found or nil if key is not present. Note that when not-found (or\n  nil) is shoved into the map, the association is removed.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(key [not-found])], :arglists ([key & [not-found]]), :arglists-meta (nil)}}, :name active.clojure.lens/member, :variadic true, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(key [not-found])], :arglists ([key & [not-found]]), :arglists-meta (nil)}, :method-params [(key [not-found])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 189, :end-line 189, :max-fixed-arity 1, :fn-var true, :arglists ([key & [not-found]]), :doc "Returns a lens showing the value mapped to the given key in a map,\n  not-found or nil if key is not present. Note that when not-found (or\n  nil) is shoved into the map, the association is removed."}, >>2 {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 89, :column 8, :end-line 89, :end-column 11, :private true, :arglists (quote ([l1 l2]))}, :private true, :name active.clojure.lens/>>2, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 11, :method-params ([l1 l2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l1 l2]))}, void {:name active.clojure.lens/void, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :line 198, :column 1, :end-line 199, :end-column 7, :doc "A trivial lens that just shows nil over anything, and does never change anything.", :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 199, :column 3, :end-line 199, :end-column 7, :doc "A trivial lens that just shows nil over anything, and does never change anything."}, :tag any}, head {:name active.clojure.lens/head, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :line 120, :column 1, :end-line 123, :end-column 7, :doc "A lens focusing on the first element in a collection. It\n  yanks nil if the collection is empty, and will not insert nil into an empty collection.", :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 123, :column 3, :end-line 123, :end-column 7, :doc "A lens focusing on the first element in a collection. It\n  yanks nil if the collection is empty, and will not insert nil into an empty collection."}, :tag any}, -yank {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 7, :column 4, :end-line 7, :end-column 9, :protocol active.clojure.lens/Lens, :doc nil, :arglists (quote ([lens data]))}, :protocol active.clojure.lens/Lens, :name active.clojure.lens/-yank, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 9, :method-params ([lens data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([lens data])), :doc nil}, Lens {:meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 3, :column 14, :end-line 3, :end-column 18, :doc "Protocol for types that can be used as a lens, defined by a\n   function to yank some value out of a given data value, and a function\n   to shove an updated value back in.", :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-yank [[lens data]], -shove [[lens data v]]}}}, :protocol-symbol true, :name active.clojure.lens/Lens, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 18, :column 1, :line 3, :protocol-info {:methods {-yank [[lens data]], -shove [[lens data v]]}}, :info nil, :end-line 3, :tag any, :impls #{cljs/core.Keyword active.clojure.lens/ExplicitLens}, :doc "Protocol for types that can be used as a lens, defined by a\n   function to yank some value out of a given data value, and a function\n   to shove an updated value back in.", :jsdoc ("@interface")}, consx {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 115, :column 8, :end-line 115, :end-column 13, :private true, :arglists (quote ([v coll]))}, :private true, :name active.clojure.lens/consx, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 13, :method-params ([v coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v coll]))}, nel-tail {:name active.clojure.lens/nel-tail, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :line 142, :column 1, :end-line 145, :end-column 11, :doc "A lens focusing on the all but the first element in a non-empty collection.\n  Behaviour on an empty collection is undefined.", :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 145, :column 3, :end-line 145, :end-column 11, :doc "A lens focusing on the all but the first element in a non-empty collection.\n  Behaviour on an empty collection is undefined."}, :tag any}, id {:name active.clojure.lens/id, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :line 78, :column 1, :end-line 82, :end-column 5, :doc "Identity lens, that just show a data structure as it is.\n          It's also the neutral element of lens concatenation\n          reacl.lens/>>.", :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 82, :column 3, :end-line 82, :end-column 5, :doc "Identity lens, that just show a data structure as it is.\n          It's also the neutral element of lens concatenation\n          reacl.lens/>>."}, :tag any}, tail {:name active.clojure.lens/tail, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :line 135, :column 1, :end-line 138, :end-column 7, :doc "A lens focusing on the all but the first element in a collection.\n  Note that nil will be prepended when shoving into an empty collection.", :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 138, :column 3, :end-line 138, :end-column 7, :doc "A lens focusing on the all but the first element in a collection.\n  Note that nil will be prepended when shoving into an empty collection."}, :tag any}, plus-yank {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 243, :column 8, :end-line 243, :end-column 17, :private true, :arglists (quote ([data lenses]))}, :private true, :name active.clojure.lens/plus-yank, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 17, :method-params ([data lenses]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 243, :end-line 243, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data lenses]))}, xmap-yank {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 59, :column 8, :end-line 59, :end-column 17, :private true, :arglists (quote ([data f g & args])), :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(data f g args)], :arglists ([data f g & args]), :arglists-meta (nil)}}, :private true, :name active.clojure.lens/xmap-yank, :variadic true, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(data f g args)], :arglists ([data f g & args]), :arglists-meta (nil)}, :method-params [(data f g args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 3, :fn-var true, :arglists ([data f g & args])}, default-shove {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 107, :column 8, :end-line 107, :end-column 21, :private true, :arglists (quote ([v dflt]))}, :private true, :name active.clojure.lens/default-shove, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 21, :method-params ([v dflt]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v dflt]))}, as-map {:name active.clojure.lens/as-map, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :line 180, :column 1, :end-line 181, :end-column 9, :doc "A lens that views a sequence of pairs as a map.", :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 181, :column 3, :end-line 181, :end-column 9, :doc "A lens that views a sequence of pairs as a map."}, :tag any}, nel-head {:name active.clojure.lens/nel-head, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :line 127, :column 1, :end-line 131, :end-column 11, :doc "A lens focusing on the first element in a non-empty\n  collection. Behaviour on an empty collection is undefined.", :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 131, :column 3, :end-line 131, :end-column 11, :doc "A lens focusing on the first element in a non-empty\n  collection. Behaviour on an empty collection is undefined."}, :tag any}, mult-yank {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 217, :column 8, :end-line 217, :end-column 17, :private true, :arglists (quote ([data lenses]))}, :private true, :name active.clojure.lens/mult-yank, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 17, :method-params ([data lenses]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data lenses]))}, ++ {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 252, :column 7, :end-line 252, :end-column 9, :arglists (quote ([& lenses])), :doc "Returns a lens over some data structure that shows a sequence of\n  elements that each of the given lenses show on that. Note that the\n  behaviour is undefined if those lenses do not show distrinct parts\n  of the data structure.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(lenses)], :arglists ([& lenses]), :arglists-meta (nil)}}, :name active.clojure.lens/++, :variadic true, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 9, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(lenses)], :arglists ([& lenses]), :arglists-meta (nil)}, :method-params [(lenses)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 252, :end-line 252, :max-fixed-arity 0, :fn-var true, :arglists ([& lenses]), :doc "Returns a lens over some data structure that shows a sequence of\n  elements that each of the given lenses show on that. Note that the\n  behaviour is undefined if those lenses do not show distrinct parts\n  of the data structure."}, mult-shove {:protocol-inline nil, :meta {:file "/Users/marcoschneider/Work/active-graphql/.cljs_rhino_repl/active/clojure/lens.cljc", :line 221, :column 8, :end-line 221, :end-column 18, :private true, :arglists (quote ([data v lenses]))}, :private true, :name active.clojure.lens/mult-shove, :variadic false, :file ".cljs_rhino_repl/active/clojure/lens.cljc", :end-column 18, :method-params ([data v lenses]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 221, :end-line 221, :max-fixed-arity 3, :fn-var true, :arglists (quote ([data v lenses]))}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:args shover args :yanker :shover yanker}, :order [:yanker :shover :args yanker shover args]}, :doc nil}